'use strict';
var i=0;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var records = document.getElementById("records");
var starsEarned = 0;
var i = 0;

var Character = function () {
    function Character(x, y, sprite) {
        _classCallCheck(this, Character);

        this.x = -100;
        this.y = 50;
        this.sprite = '';
    }

    _createClass(Character, [{
        key: 'render',
        value: function render() {
            ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
        }
    }]);

    return Character;
}();

var Enemy = function (_Character) {
    _inherits(Enemy, _Character);

    function Enemy(x, y, sprite) {
        _classCallCheck(this, Enemy);

        var _this = _possibleConstructorReturn(this, (Enemy.__proto__ || Object.getPrototypeOf(Enemy)).call(this, x, y, sprite));

        _this.x = -100;
        _this.y = enemiesYPositions[Math.floor(Math.random() * enemiesYPositions.length)];
        _this.speed = 1;
        _this.sprite = 'images/enemy-bug.png';
        return _this;
    }

    _createClass(Enemy, [{
        key: 'update',
        value: function update(dt) {
            this.x += 150 * dt * this.speed;
            if (this.x > 520) {
                this.x = -100;
                this.y = enemiesYPositions[Math.floor(Math.random() * enemiesYPositions.length)];
            }
        }
    }]);

    return Enemy;
}(Character);

;
function initialPlayerPosition() {
    player.y = 390;
    player.x = 200;
}

var Player = function (_Character2) {
    _inherits(Player, _Character2);

    function Player(x, y, sprite) {
        _classCallCheck(this, Player);

        var _this2 = _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, x, y, sprite));

        _this2.x = 200;
        _this2.y = 390;
        _this2.speed = 1;
        _this2.sprite = 'images/char-boy.png';
        return _this2;
    }

    _createClass(Player, [{
        key: 'update',
        value: function update() {
            if (player.y == -35) {
                starsEarned++;
                initialPlayerPosition();
                star.classList.add("star-loaded");
                setTimeout(function () {
                    star.classList.remove("star-loaded");
                }, 1000);
            }
            document.getElementById("stars-number").innerHTML = starsEarned;
        }
    }, {
        key: 'handleInput',
        value: function handleInput(keyCode) {
            switch (keyCode) {
                case 'left':
                    if (this.x > 0) this.x -= 100;
                    break;
                case 'right':
                    if (this.x < 400) this.x += 100;
                    break;
                case 'up':
                    if (this.y > -35) this.y -= 85;
                    break;
                case 'down':
                    if (this.y < 390) this.y += 85;
                    break;
            }
        }
    }]);

    return Player;
}(Character);

var player = new Player();
var allEnemies = [];
var enemiesYPositions = [50, 135, 220];
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}
function enemiesSpeed() {
    allEnemies.forEach(function (enemy) {
        enemy.speed = getRandomArbitrary(1, 2.3);
    });
}
function createEnemies() {
    for (i = 0; i < 3; i++) {
        var enemy = new Enemy();
        allEnemies.push(enemy);
    }
}
createEnemies();
enemiesSpeed();
document.addEventListener('keyup', function (e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };
    player.handleInput(allowedKeys[e.keyCode]);
});
function checkCollisions() {
    allEnemies.forEach(function (enemy) {
        var enemyxposition = Math.round(enemy.x);
        var playerXPosition = player.x;
        if (player.x > enemyxposition - 50 && player.x < enemyxposition + 70 && player.y == enemy.y) {
            starsEarned--;
            initialPlayerPosition();
            dieAlert.classList.add("die-animation");
            setTimeout(function () {
                dieAlert.classList.remove("die-animation");
            }, 600);
        }
        document.getElementById("stars-number").innerHTML = starsEarned;
    });
}
